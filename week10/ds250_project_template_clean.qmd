---
title: "Client Report - The War with Star Wars"
subtitle: "Course DS 250"
author: "Rebecca Roeth"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
```


## Elevator pitch

While the dataset is fun, there is very few pieces of information that can actually be used for the final question 4 where I will be creating a ML model to predict if someone makes $50k or more. Additionally, the category I use "Household Income" is a vague target for what I want to find out. However, by making the dataset more readable, I was able to figure out what was useable and other facinating information about the dataset.

```{python}
#| label: project-data
#| code-summary: Read and format project data

# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
url = "https://raw.githubusercontent.com/fivethirtyeight/data/master/star-wars-survey/StarWars.csv"
data = pd.read_csv(url, encoding='unicode_escape')
```

__Highlight the Questions and Tasks__

## Clean Up

__Shorten the column names and clean them up for easier use with pandas. Provide a table or list that exemplifies how you fixed the names.__

```{python}
data.rename(columns = {
    'Have you seen any of the 6 films in the Star Wars franchise?': 'Seen_SW',
    'Do you consider yourself to be a fan of the Star Wars film franchise?': 'Fan_of_SW',
    'Which character shot first?':'shot_first',
    'Are you familiar with the Expanded Universe?':'familair_EU',
    'Do you consider yourself to be a fan of the Expanded Universe?':'fan_EU',
    'Do you consider yourself to be a fan of the Star Trek franchise?':'ST_fan',
    'Household Income':'Income',
    
    #Context clues said these are the Star wars movies of the original and newest trilogies
    'Which of the following Star Wars films have you seen? Please select all that apply.':'SW1',
    'Unnamed: 4': 'SW2',
    'Unnamed: 5': 'SW3',
    'Unnamed: 6': 'SW4',
    'Unnamed: 7': 'SW5',
    'Unnamed: 8': 'SW6',

    'Please rank the Star Wars films in order of preference with 1 being your favorite film in the franchise and 6 being your least favorite film.':'SW1_ranked',
    'Unnamed: 10': 'SW2_ranked',
    'Unnamed: 11': 'SW3_ranked',
    'Unnamed: 12': 'SW4_ranked',
    'Unnamed: 13': 'SW5_ranked',
    'Unnamed: 14': 'SW6_ranked',

#Jar Jar Binks,Padme Amidala,Yoda,

    'Please state whether you view the following characters favorably, unfavorably, or are unfamiliar with him/her.': 'Han_Solo',
    'Unnamed: 16': 'Luke_Skywalker',
    'Unnamed: 17': 'Princes_Leia',
    'Unnamed: 18': 'Anakin',
    'Unnamed: 19': 'Obi Wan',
    'Unnamed: 20': 'Palpatine',
    'Unnamed: 21': 'Darth_Vadar',
    'Unnamed: 22': 'Lando_Calrissian',
    'Unnamed: 23': 'Boba_Fett',
    'Unnamed: 24': 'C-3PO',
    'Unnamed: 25': 'R2_D2',
    'Unnamed: 26': 'Jar_Jar_Binks',
    'Unnamed: 27': 'Padme_Amidala',
    'Unnamed: 28': 'Yoda'

}, inplace = True)

print(data.info())

```

## Formating

__Clean and format the data so that it can be used in a machine learning model. As you format the data, you should complete each item listed below__


_Part A_

__Filter the dataset to respondents that have seen at least one film.__
```{python}
data = data.query('Seen_SW == "Yes"')
print(data.filter(["Seen_SW"]).head())
```

_Part B_

__Create a new column that converts the age ranges to a single number. Drop the age range categorical column.__
```{python}
def split_age(i):
    age_list = str(i.Age).split("-")
    if age_list[0] == "> 60":
        return 61
    elif age_list[0] == "NaN":
        return 0
    return float(age_list[0])

data['Age'] = data['Age'].fillna(0)
data["age_range"] = data.apply(split_age, axis=1)
del data['Age']

print(data.filter(["age_range"]))
```

_Part C_

__Create a new column that converts the education groupings to a single number. Drop the school categorical column__

```{python}
def split_education(i):
    i = i.Education
    if i == "High school degree":
        return 1.0
    elif i == "Some college or Associate degree":
        return 2.0
    elif i == "Bachelor degree":
        return 3.0
    elif i == "Graduate degree":
        return 4.0
data["education"] = data.apply(split_education, axis=1)
data['education'] = data['education'].fillna(0)
del data['Education']
print(data.filter(["education"]))
```

_Part D_

__Create a new column that converts the income ranges to a single number. Drop the income range categorical column.__
```{python}
def split_income(i):
    income_list = str(i.Income).split(" - ")
    if income_list[0] == "$0":
        return 1
    elif income_list[0] == "$25,000":
        return 2
    elif income_list[0] == "$50,000":
        return 4
    elif income_list[0] == "$100,000":
        return 8
    elif income_list[0] == "$150,000+":
        return 12
    else: # NaN
        return 0
    
data["Income_range"] = data.apply(split_income, axis=1)
del data['Income']
print(data.filter(["Income_range"]))
```

_Part E_

__Create your target (also known as “y” or “label”) column based on the new income range column.__
```{python}
def label_function(i):
    if i.Income_range >= 4:
        return True
    else: 
        return False
data['y'] = data.apply(label_function, axis=1)
```

_Part F_

__One-hot encode all remaining categorical columns.__

```{python}
from sklearn.preprocessing import OneHotEncoder 
category_list = [
  'SW1','SW2','SW3','SW4','SW5','SW6',#'SW1_ranked','SW2_ranked','SW3_ranked','SW4_ranked','SW5_ranked','SW6_ranked',

  'Luke_Skywalker','Princes_Leia','Anakin','Obi Wan','Palpatine','Darth_Vadar','Lando_Calrissian',
  'Boba_Fett','C-3PO','R2_D2','Jar_Jar_Binks','Padme_Amidala','Yoda', 

  'Seen_SW','Fan_of_SW','familair_EU','ST_fan',
  'Gender','Location (Census Region)',
]
enc = OneHotEncoder() 
enc_data = 0
for i in category_list:
    data[(i)] = data[(i)].astype('category').cat.codes

    enc_data += pd.DataFrame(enc.fit_transform(data[[i]]).toarray())

data = data.join(enc_data) 
print(data.info()) 
```

## Graphs and articles

__Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__

_https://fivethirtyeight.com/features/americas-favorite-star-wars-movies-and-least-favorite-characters/_

```{python}
movies_ranked = ['SW1_ranked','SW2_ranked','SW3_ranked','SW4_ranked','SW5_ranked','SW6_ranked']
seen_all = data.query('SW1 == 0 and SW2 == 0 and SW3 == 0 and SW4 == 0 and SW5 == 0 and SW6 == 0')
#print(seen_all.filter(['SW1_ranked','SW2_ranked','SW3_ranked','SW4_ranked','SW5_ranked','SW6_ranked']).head())

def SW_Movie_Seen(i):
# Which of the following Star Wars films have you seen?
    if i.SW1_ranked == "1":
        return "SW1"
    elif i.SW2_ranked == "1":
        return "SW2"
    elif i.SW3_ranked == "1":
        return "SW3"    
    elif i.SW4_ranked == "1":
        return "SW4"    
    elif i.SW5_ranked == "1":
        return "SW5"
    elif i.SW6_ranked == "1":
        return 'SW6'

seen_all["SW_ranked"] = seen_all.apply(SW_Movie_Seen, axis=1)
#print(New_df.filter(["SW_ranked"]))

chart = px.histogram(seen_all,
    y = "SW_ranked",
    category_orders=dict(SW_ranked=['SW1','SW2','SW3','SW4','SW5','SW6']),
    title = "Which 'Star Wars' Movies Have You Seen?"
    )
chart.show()

# Who shot first?
chart2 = px.histogram(data,
    y = "shot_first",
    title = "Who Shot First?"
)
chart2.show()
```

## QUESTION|TASK 4

__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__

```{python}
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import BernoulliNB, CategoricalNB, ComplementNB, GaussianNB, MultinomialNB
from sklearn.metrics import accuracy_score

from sklearn import metrics
import matplotlib.pyplot as plt
```

I found through running graphs the columns that would make the best features. However, because I struggled with the one-hot encoding and the Star Trek fan column was unable to work.
```{python}
features = data.filter([
    'age_range', 'education' #'SW6_ranked', 'Jar_Jar_Binks, ST_fan
])
targets = data.filter(['y'])

train_data, test_data, train_targets, test_targets = train_test_split(features, targets, test_size=0.3)
print(test_data)
#BernoulliNB, CategoricalNB, ComplementNB, GaussianNB, MultinomialNB
classifier = CategoricalNB()
classifier.fit(train_data, train_targets)

targets_predicted = classifier.predict(test_data)
accuracy = accuracy_score(test_targets, targets_predicted)
print(accuracy)

print(classifier.score(test_data, test_targets))

confusion_matrix = metrics.confusion_matrix(test_targets, targets_predicted)
cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [False, True])
cm_display.plot()
plt.show()
```

With only an accuracy score at 60-68%, this should still be considered successful since there is very other information that would link to income in a dataset designed to assess the _Star Wars_ fanbase. There were more false positives than I prefered (61/281 or roughly 1/5th) but this data is still somewhat effective.